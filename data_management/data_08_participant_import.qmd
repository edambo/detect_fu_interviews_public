---
title: "Participant Import"
format: html
---


```{r, message= FALSE}
library(readr)
library(purrr)
library(stringr)
library(tidyverse)
library(expss)
library(dplyr)
library(janitor)
```
# Load the data

Load the data table into the global environment as a data frame using the raw csv file. We will create categorical variables with numerical values that match the codebook and also create a factor variable for each categorical variable in the data frame to be used for analysis.

```{r}

participant <- read_csv("../data/filemaker_pro_exports/participant_import.csv")

```
# Clean the data

Here we will convert all variable names to snake case so that everything is uniform.

```{r}
participant <- clean_names(participant)
```

## Coerce categorical variables to factor variables

```{r}
participant <- participant %>%
  mutate(
    across(
      .cols  = c(x_do_not_call,	x_caregiver_lack_knowledge : x_difficulty_medications, x_unmet_needs, x_aps_reported),
      .fns   = ~ factor(.x, levels = c("No", "Yes")),
      .names = "{col}_2cat_f"
      )
    )

participant <- participant %>%
  mutate(
    across(
      .cols  = c(x_unusual_odor,x_health_safety_concern, x_hoarding_medications),
      .fns   = ~ factor(.x, levels = c("No", "Unable To Assess", "Yes")),
      .names = "{col}_3cat_f"
      )
    )

participant <- participant %>%
  mutate(
    x_disarray_hoarding_3cat_f = factor(
      x_disarray_hoarding,
      levels = c("Did Not Enter Patient's Home", "No", "Yes")
      )
    )

participant <- participant %>%
  mutate(
    xc_detect_status_2cat_f = factor(
      xc_detect_status,
      levels = c("Negative", "Positive")
      )
    )

participant <- participant %>%
  mutate(
    sex_3cat_f = factor(
      sex,
      levels = c("Female", "Male", "Unknown (Unable To Determine)")
      )
    )
```

### Remove variables that have recoded forms

```{r}
participant <- participant %>% select(-c(sex, x_do_not_call, x_unusual_odor : x_aps_reported, xc_detect_status))
```

# Save as rds file

```{r}
  saveRDS(participant, "participant_import.rds")

```
