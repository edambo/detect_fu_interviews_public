---
title: "data_09_merged_detect_fu_data"
format: html
---

# Purpose

The purpose of the code in this file is to compare the MedStar IDS in the DETECT FU Interview data sets, create a combined data set of all the DETECT F/U data set that includes an ID for each unique participant.

# Load Packages

```{r}
library(dplyr)
library(readr)
library(tidyverse)
```
# Load DETECT F/U Data

```{r}
aps <- read_rds("../data/cleaned_rds_files/aps_investigations_import.rds")
cls <- read_rds("../data/cleaned_rds_files/clutter_scale_import.rds")
glh <- read_rds("../data/cleaned_rds_files/general_health_import.rds")
lpa <- read_rds("../data/cleaned_rds_files/lead_panel_assessment_import.rds")
obs <- read_rds("../data/cleaned_rds_files/observational_measures_import.rds")
par <- read_rds("../data/unique_id_creation/participant_unique_id.rds")
sfr <- read_rds("../data/cleaned_rds_files/self_report_import.rds")
soc <- read_rds("../data/cleaned_rds_files/sociodemographic_information_import.rds")


# Fix the lead panel assessment data error defined in fix_lead_data_error file
source("../user_defined_functions/fix_lead_data_error.R")
lpc <- error_fix(lpa)
```

# Summarize the Medstar ID commonalities and differences across all the datasets

```{r}
# Create vectors, each containing the medstar IDS for each DETECT FU data set.
vec_list <- list(aps_id = aps, cls_id = cls, glh_id = glh, lpc_id = lpc, obs_id = obs, par_id = par, sfr_id = sfr, soc_id = soc)

medstar_id_lists <- lapply(vec_list, function(vec) {
 vec_ID <-  unique(vec$medstar_id)
})

# Push the vectors to the Global environment
list2env(medstar_id_lists, envir = .GlobalEnv)

```
## Intersect of MedStar IDS across all DETECT FU datasets
```{r}
intersect_detect <- Reduce(intersect, list(aps_id, cls_id, glh_id, lpc_id, obs_id, par_id, sfr_id, soc_id))
cat("There are", length(intersect_detect), "Medstar IDs that are present in all the DETECT FU Interview datasets")
```
## Comparison of MedStar IDs in each dataset to those in the other DETECT FU Interviews datasets
```{r}
# Create a function that checks the presence of the values of one vector in another reference vector
common_id <- function(vec) {
  #  List of vectors to check each vector against
  vec_ref_list <- list(aps_id = aps_id, cls_id = cls_id, glh_id = glh_id, lpc_id = lpc_id, obs_id = obs_id, 
                     par_id = par_id, sfr_id = sfr_id, soc_id = soc_id)
  
  # Function for comparing 2 vectors
  compare_vec <- function(vec, ref_vec) {
    comparison_column <- full_join(data.frame(key = ref_vec, ref_vec), 
              data.frame(key = vec, vec), by ="key") %>%
    select(-key) %>% 
      mutate(
        in_both = case_when(
          is.na(ref_vec) == T & is.na(vec) == F ~ "Only in test vector",
          is.na(ref_vec) == F & is.na(vec) == T ~ "Only in reference",
          ref_vec == vec                        ~ "In both"    
        ),
        in_both = factor(in_both,
                         levels = c("In both", "Only in reference", "Only in test vector"))
      )
    tab <- as.data.frame(table(comparison_column$in_both))
    tab
  }
  
  # Apply the compare_vec function over a list of reference vectors.
  output <- lapply(vec_ref_list, compare_vec, vec = vec) %>% as.data.frame()
  
  return(output)
}
```

### Participants dataset
```{r, tbl}
# Comparison of MedStar IDs in the participant dataset to those in the other DETECT FU Interviews datasets
par_id_compare <- common_id(par_id)
par_id_compare
```

### APS Investigations dataset
```{r, tbl}
# Comparison of MedStar IDs in the APS investigations dataset to those in the other DETECT FU Interviews datasets
aps_id_compare <- common_id(aps_id)
aps_id_compare
```

### Clutter Scale dataset
```{r, tbl}
# Comparison of MedStar IDs in the clutter scale dataset to those in the other DETECT FU Interviews datasets
cls_id_compare <- common_id(cls_id)
cls_id_compare
```

### General Health dataset
```{r, tbl}
# Comparison of MedStar IDs in the general health dataset to those in the other DETECT FU Interviews datasets
glh_id_compare <- common_id(glh_id)
glh_id_compare
```

### LEAD Panel Assessment dataset
```{r, tbl}
# Comparison of MedStar IDs in the LEAD panel assessment dataset to those in the other DETECT FU Interviews datasets
lpc_id_compare <- common_id(lpc_id)
lpc_id_compare
```

### Observational Measures dataset
```{r, tbl}
# Comparison of MedStar IDs in the Observational measures dataset to those in the other DETECT FU Interviews datasets
obs_id_compare <- common_id(obs_id)
obs_id_compare
```

### Self Report dataset
```{r, tbl}
# Comparison of MedStar IDs in the self report dataset to those in the other DETECT FU Interviews datasets
sfr_id_compare <- common_id(sfr_id)
sfr_id_compare
```

### Self Report dataset
```{r, tbl}
# Comparison of MedStar IDs in the self report dataset to those in the other DETECT FU Interviews datasets
sfr_id_compare <- common_id(sfr_id)
sfr_id_compare
```

### Sociodemographic Information dataset
```{r, tbl}
# Comparison of MedStar IDs in the sociodemographic information dataset to those in the other DETECT FU Interviews datasets
soc_id_compare <- common_id(soc_id)
soc_id_compare
```

# Select Only the Needed Variables and Merge the Subsetted Data Frames

```{r}
par_merge <- par %>% select(-c(exact_match_id))
```


```{r}
# APS Investigations 
aps_merge <- aps %>% select(-c(x_primary_key, name_full, xc_case_id))
```

```{r}
# Clutter Scale
cls_merge <- cls %>% select(-c(x_primary_key, name_full, name_last, xc_case_id))
```

```{r}
# General health
glh_merge <- glh %>% select(-c(x_primary_key, name_full, xc_case_id))
```

```{r}
# LEAD Panel Assessment
lpc_merge <- lpc %>% select(-c(x_primary_key, name_full, case_id))
```

```{r}
# Observational Measures
obs_merge <- obs %>% select(-c(x_primary_key, name_full, xc_case_id))
```

```{r}
# Self Report
sfr_merge <- sfr %>% select(-c(x_primary_key, name_full, xc_case_id))
```

```{r}
# Sociodemographic Information
soc_merge <- soc %>% select(-c(x_primary_key, name_full, xc_case_id))
```

```{r}
# Merge the data and add suffixes to the column names to indicate the data sets of origin
detect_fu_merge <-lst(par = par_merge, aps = aps_merge, cls = cls_merge, glh = glh_merge, lpc = lpc_merge, obs = obs_merge, sfr = sfr_merge, soc = soc_merge) %>%
  imap(
    function(x, y) x %>% 
      rename_with(~ paste(., y, sep = '_'), -medstar_id
                  )
    ) %>%
  reduce(full_join, by = 'medstar_id')
```

# Save as RDS file
```{r}
saveRDS(detect_fu_merge, "detect_fu_data_merged.rds")
```







